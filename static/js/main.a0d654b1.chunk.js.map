{"version":3,"sources":["Components/NavBar.js","Components/HomePage.js","Components/App.js","Components/Footer.js","serviceWorker.js","index.js","logo.svg"],"names":["NavBar","Component","className","id","Link","to","href","target","rel","a","src","logo","alt","App","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"+RA8CeA,G,MC5CQC,Y,iLDKf,OACI,4BAAQC,UAAU,cAChB,wBAAIC,GAAG,iBACL,uBACED,UAAU,WACVE,MAAI,EAACC,GAAG,GACRC,KAAK,GACLC,OAAO,QACPC,IAAI,sBACNC,GAAC,GAND,SAWR,yBAAKC,IAAKC,IAAMT,UAAU,WAAWU,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEV,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eAQA,uBACEN,UAAU,WACVI,KAAK,sCACLC,OAAO,GACPC,IAAI,qBAJN,c,GA5BaP,cEgBNY,GCnBMZ,Y,iLDSnB,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,Y,GANUY,IAAMb,YEIJc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBEnInBC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.a0d654b1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport logo from '../logo.svg';\r\n\r\n\r\nclass NavBar extends Component {\r\n    render(){\r\n        return (\r\n            <header className=\"App-header\">\r\n              <ul id=\"headerButtons\">\r\n                <a \r\n                  className=\"App-link\"\r\n                  Link to=\"\"\r\n                  href=\"\"\r\n                  target=\"blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                a>\r\n                Home\r\n                </a>\r\n              </ul>  \r\n\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://maciejsto.github.io/website\"\r\n          target=\"\"\r\n          rel=\"noopener noopener\"\r\n        >\r\n          About\r\n        </a>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from 'react';\r\n\r\nclass HomePage extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Home Page\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HomePage;","import React from 'react';\nimport { BrowserRouter as Router , Route, Link} from 'react-router-dom';\nimport logo from '../logo.svg';\nimport '../App.css';\nimport HomePage from '../Components/HomePage';\nimport NavBar from '../Components/NavBar';\nimport Footer from '../Components/Footer';\n\nclass App extends React.Component {\n  render() {\n//function App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <NavBar/>\n      </div>\n    </Router>\n  );\n  }\n}\n\nexport default App;\n","import React , { Component } from 'react';\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        return (\r\n            <footer>\r\n              <div>\r\n                  Footer component\r\n              </div>\r\n            </footer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}